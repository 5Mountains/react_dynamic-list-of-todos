{"version":3,"sources":["components/TodoList/TodoList.jsx","data/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","selectUser","toCheck","toSearch","toSelect","toShuffle","className","onChange","value","type","onClick","map","todo","key","id","classNames","completed","checked","readOnly","title","userId","request","path","a","fetch","response","data","json","Error","getTodos","getUser","CurrentUser","state","user","this","dataLoad","prevProps","props","setState","clearUser","name","email","phone","React","Component","App","selectedUserId","query","status","shuffle","clearSelectedUser","toCheckTodo","todoId","toSearchFilter","e","target","toSelectFilter","filter","newTodos","queryLow","toLowerCase","includes","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a2fb3b8.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  toCheck,\n  toSearch,\n  toSelect,\n  toShuffle,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__filters\">\n      <label className=\"TodoList__label\">\n        Todo filter:\n        <input\n          className=\"TodoList__input\"\n          onChange={toSearch}\n        />\n      </label>\n\n      <label className=\"TodoList__label\">\n        Filter by status:\n        <select\n          className=\"TodoList__select\"\n          onChange={toSelect}\n        >\n          <option value=\"all\">Show all</option>\n          <option value=\"active\">Show active</option>\n          <option value=\"completed\">Show completed</option>\n        </select>\n      </label>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={toShuffle}\n      >\n        shuffle\n      </button>\n    </div>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames('TodoList__item',\n              { 'TodoList__item--checked': todo.completed },\n              { 'TodoList__item--unchecked': !todo.completed })}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onClick={() => toCheck(todo.id)}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames('button',\n                { 'TodoList__user-button': todo.completed },\n                { 'TodoList__user-button--selected': !todo.completed })}\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  toCheck: PropTypes.func.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  toSearch: PropTypes.func.isRequired,\n  toSelect: PropTypes.func.isRequired,\n  toShuffle: PropTypes.func.isRequired,\n};\n","const URL = 'https://mate-api.herokuapp.com';\n\nconst request = async(path) => {\n  try {\n    const response = await fetch(`${URL}${path}`);\n    const data = response.json();\n\n    return data;\n  } catch (error) {\n    throw new Error('Whoops!');\n  }\n};\n\nexport const getTodos = async() => {\n  const data = await request('/todos');\n\n  return data;\n};\n\nexport const getUser = async(userId) => {\n  const data = await request(`/users/${userId}`);\n\n  return data;\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../data/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  async componentDidMount() {\n    this.dataLoad();\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.dataLoad();\n    }\n  }\n\n  async dataLoad() {\n    const response = await getUser(this.props.userId);\n\n    this.setState({ user: response.data });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    if (!user) {\n      return (\n        <p>Loading data...</p>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button type=\"button\" onClick={() => clearUser()}>Clear user</button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './data/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    status: 'all',\n    shuffle: false,\n  };\n\n  async componentDidMount() {\n    const response = await getTodos();\n\n    this.setState({\n      todos: response.data.filter(todo => todo.userId),\n    });\n  }\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  toCheckTodo = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => ((todo.id !== todoId)\n        ? todo\n        : {\n          ...todo,\n          completed: !todo.completed,\n        })),\n    }));\n  }\n\n  toSearchFilter = e => this.setState({ query: e.target.value });\n\n  toSelectFilter = e => this.setState({ status: e.target.value });\n\n  toShuffle = () => {\n    this.setState(state => ({\n      shuffle: !state.shuffle,\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId, query, status, shuffle } = this.state;\n\n    const todoSearch = (todo) => {\n      const queryLow = query.toLowerCase();\n\n      return todo.title.toLowerCase().includes(queryLow);\n    };\n\n    const statusSearch = (todo) => {\n      switch (status) {\n        case 'completed':\n          return todo.completed;\n        case 'active':\n          return !todo.completed;\n        default:\n          return todo;\n      }\n    };\n\n    const newTodos = todos.filter(todoSearch).filter(statusSearch);\n\n    if (shuffle) {\n      newTodos.sort(() => Math.random() - 0.5);\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={newTodos}\n            toCheck={this.toCheckTodo}\n            selectUser={this.selectUser}\n            toSearch={this.toSearchFilter}\n            toSelect={this.toSelectFilter}\n            toShuffle={this.toShuffle}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}